// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<App /> renders correctly 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    onLayout={[Function]}
    style={
      Array [
        Object {
          "flex": 1,
        },
        Object {
          "paddingBottom": 0,
        },
      ]
    }
  >
    <View
      onLayout={[Function]}
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <View
        style={
          Object {
            "height": 1334,
            "position": "absolute",
            "width": 750,
          }
        }
      >
        <View
          style={
            Object {
              "flex": 1,
              "transform": Array [
                Object {
                  "translateX": 0,
                },
                Object {
                  "translateY": 0,
                },
              ],
            }
          }
        >
          <View
            style={
              Object {
                "flex": 1,
                "transform": Array [
                  Object {
                    "scale": 1,
                  },
                ],
              }
            }
          >
            <View
              disabled={true}
              style={
                Object {
                  "borderBottomWidth": 0,
                  "borderColor": "transparent",
                  "borderLeftWidth": 0,
                  "borderRightWidth": 0,
                  "borderTopWidth": 0,
                  "flex": 1,
                }
              }
            >
              <View
                style={
                  Object {
                    "alignItems": "center",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "flexShrink": 1,
                    "justifyContent": "center",
                    "paddingHorizontal": 15,
                    "paddingVertical": 15,
                  }
                }
              >
                <Text>
                  Please open navigator and select a story to preview.
                </Text>
              </View>
            </View>
          </View>
        </View>
        <View
          style={
            Object {
              "backgroundColor": "white",
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
              "transform": Array [
                Object {
                  "translateX": -488.49999999999994,
                },
              ],
              "width": 487.49999999999994,
            }
          }
        >
          <RCTSafeAreaView
            emulateUnlessSupported={true}
            style={
              Object {
                "flex": 1,
              }
            }
          >
            <TextInput
              allowFontScaling={true}
              clearButtonMode="while-editing"
              disableFullscreenUI={true}
              onChangeText={[Function]}
              placeholder="Filter"
              rejectResponderTermination={true}
              returnKeyType="search"
              style={
                Object {
                  "backgroundColor": "#e6e6e6",
                  "borderBottomLeftRadius": 5,
                  "borderBottomRightRadius": 5,
                  "borderTopLeftRadius": 5,
                  "borderTopRightRadius": 5,
                  "color": "#444444",
                  "fontSize": 16,
                  "marginHorizontal": 5,
                  "marginVertical": 5,
                  "paddingHorizontal": 5,
                  "paddingVertical": 5,
                }
              }
              testID="Storybook.ListView.SearchBar"
              underlineColorAndroid="transparent"
            />
            <RCTScrollView
              data={
                Array [
                  Object {
                    "data": Array [
                      Object {
                        "getDecorated": [Function],
                        "getOriginal": [Function],
                        "hooks": HooksContext {
                          "currentContext": null,
                          "currentDecoratorName": null,
                          "currentEffects": Array [],
                          "currentHooks": Array [],
                          "currentPhase": "NONE",
                          "hasUpdates": false,
                          "hookListsMap": WeakMap {},
                          "mountedDecorators": Set {},
                          "nextHookIndex": 0,
                          "prevEffects": Array [],
                          "prevMountedDecorators": Set {},
                          "renderListener": [Function],
                        },
                        "id": "button--text",
                        "kind": "Button",
                        "name": "Text",
                        "parameters": Object {
                          "fileName": "/Users/ryo/Development/Design Systems/expo-storybook/stories/1-Button.stories.js",
                          "framework": "react-native",
                        },
                        "story": "Text",
                        "storyFn": [Function],
                      },
                    ],
                    "title": "Button",
                  },
                  Object {
                    "data": Array [
                      Object {
                        "getDecorated": [Function],
                        "getOriginal": [Function],
                        "hooks": HooksContext {
                          "currentContext": null,
                          "currentDecoratorName": null,
                          "currentEffects": Array [],
                          "currentHooks": Array [],
                          "currentPhase": "NONE",
                          "hasUpdates": false,
                          "hookListsMap": WeakMap {},
                          "mountedDecorators": Set {},
                          "nextHookIndex": 0,
                          "prevEffects": Array [],
                          "prevMountedDecorators": Set {},
                          "renderListener": [Function],
                        },
                        "id": "constants--constants",
                        "kind": "Constants",
                        "name": "Constants",
                        "parameters": Object {
                          "fileName": "/Users/ryo/Development/Design Systems/expo-storybook/stories/2-Constants.stories.js",
                          "framework": "react-native",
                        },
                        "story": "Constants",
                        "storyFn": [Function],
                      },
                    ],
                    "title": "Constants",
                  },
                  Object {
                    "data": Array [
                      Object {
                        "getDecorated": [Function],
                        "getOriginal": [Function],
                        "hooks": HooksContext {
                          "currentContext": null,
                          "currentDecoratorName": null,
                          "currentEffects": Array [],
                          "currentHooks": Array [],
                          "currentPhase": "NONE",
                          "hasUpdates": false,
                          "hookListsMap": WeakMap {},
                          "mountedDecorators": Set {},
                          "nextHookIndex": 0,
                          "prevEffects": Array [],
                          "prevMountedDecorators": Set {},
                          "renderListener": [Function],
                        },
                        "id": "lineargradient--linear-gradient",
                        "kind": "LinearGradient",
                        "name": "Linear Gradient",
                        "parameters": Object {
                          "fileName": "/Users/ryo/Development/Design Systems/expo-storybook/stories/3-LinearGradient.stories.js",
                          "framework": "react-native",
                        },
                        "story": "Linear Gradient",
                        "storyFn": [Function],
                      },
                    ],
                    "title": "LinearGradient",
                  },
                  Object {
                    "data": Array [
                      Object {
                        "getDecorated": [Function],
                        "getOriginal": [Function],
                        "hooks": HooksContext {
                          "currentContext": null,
                          "currentDecoratorName": null,
                          "currentEffects": Array [],
                          "currentHooks": Array [],
                          "currentPhase": "NONE",
                          "hasUpdates": false,
                          "hookListsMap": WeakMap {},
                          "mountedDecorators": Set {},
                          "nextHookIndex": 0,
                          "prevEffects": Array [],
                          "prevMountedDecorators": Set {},
                          "renderListener": [Function],
                        },
                        "id": "font--font",
                        "kind": "Font",
                        "name": "Font",
                        "parameters": Object {
                          "fileName": "/Users/ryo/Development/Design Systems/expo-storybook/stories/4-Font.stories.js",
                          "framework": "react-native",
                        },
                        "story": "Font",
                        "storyFn": [Function],
                      },
                    ],
                    "title": "Font",
                  },
                ]
              }
              disableVirtualization={false}
              getItem={[Function]}
              getItemCount={[Function]}
              horizontal={false}
              initialNumToRender={10}
              keyExtractor={[Function]}
              maxToRenderPerBatch={10}
              onContentSizeChange={[Function]}
              onEndReachedThreshold={2}
              onLayout={[Function]}
              onMomentumScrollEnd={[Function]}
              onScroll={[Function]}
              onScrollBeginDrag={[Function]}
              onScrollEndDrag={[Function]}
              renderItem={[Function]}
              scrollEventThrottle={50}
              stickyHeaderIndices={Array []}
              style={
                Object {
                  "flexBasis": 0,
                  "flexGrow": 1,
                  "flexShrink": 1,
                  "marginBottom": 40,
                }
              }
              testID="Storybook.ListView"
              updateCellsBatchingPeriod={50}
              windowSize={21}
            >
              <View>
                <View
                  onLayout={[Function]}
                  style={null}
                >
                  <View
                    style={
                      Object {
                        "paddingVertical": 5,
                      }
                    }
                  >
                    <Text
                      selected={null}
                      style={
                        Object {
                          "color": "black",
                          "fontSize": 20,
                        }
                      }
                    >
                      Button
                    </Text>
                  </View>
                </View>
                <View
                  onLayout={[Function]}
                  style={null}
                >
                  <View
                    accessibilityLabel="Storybook.ListItem.Text"
                    accessible={true}
                    focusable={true}
                    onClick={[Function]}
                    onResponderGrant={[Function]}
                    onResponderMove={[Function]}
                    onResponderRelease={[Function]}
                    onResponderTerminate={[Function]}
                    onResponderTerminationRequest={[Function]}
                    onStartShouldSetResponder={[Function]}
                    style={
                      Object {
                        "opacity": 1,
                        "paddingHorizontal": 16,
                        "paddingVertical": 5,
                      }
                    }
                    testID="Storybook.ListItem.Button.Text"
                  >
                    <Text
                      selected={null}
                      style={
                        Object {
                          "color": "black",
                          "fontSize": 16,
                        }
                      }
                    >
                      Text
                    </Text>
                  </View>
                </View>
                <View
                  onLayout={[Function]}
                  style={null}
                />
                <View
                  onLayout={[Function]}
                  style={null}
                >
                  <View
                    style={
                      Object {
                        "paddingVertical": 5,
                      }
                    }
                  >
                    <Text
                      selected={null}
                      style={
                        Object {
                          "color": "black",
                          "fontSize": 20,
                        }
                      }
                    >
                      Constants
                    </Text>
                  </View>
                </View>
                <View
                  onLayout={[Function]}
                  style={null}
                >
                  <View
                    accessibilityLabel="Storybook.ListItem.Constants"
                    accessible={true}
                    focusable={true}
                    onClick={[Function]}
                    onResponderGrant={[Function]}
                    onResponderMove={[Function]}
                    onResponderRelease={[Function]}
                    onResponderTerminate={[Function]}
                    onResponderTerminationRequest={[Function]}
                    onStartShouldSetResponder={[Function]}
                    style={
                      Object {
                        "opacity": 1,
                        "paddingHorizontal": 16,
                        "paddingVertical": 5,
                      }
                    }
                    testID="Storybook.ListItem.Constants.Constants"
                  >
                    <Text
                      selected={null}
                      style={
                        Object {
                          "color": "black",
                          "fontSize": 16,
                        }
                      }
                    >
                      Constants
                    </Text>
                  </View>
                </View>
                <View
                  onLayout={[Function]}
                  style={null}
                />
                <View
                  onLayout={[Function]}
                  style={null}
                >
                  <View
                    style={
                      Object {
                        "paddingVertical": 5,
                      }
                    }
                  >
                    <Text
                      selected={null}
                      style={
                        Object {
                          "color": "black",
                          "fontSize": 20,
                        }
                      }
                    >
                      LinearGradient
                    </Text>
                  </View>
                </View>
                <View
                  onLayout={[Function]}
                  style={null}
                >
                  <View
                    accessibilityLabel="Storybook.ListItem.Linear Gradient"
                    accessible={true}
                    focusable={true}
                    onClick={[Function]}
                    onResponderGrant={[Function]}
                    onResponderMove={[Function]}
                    onResponderRelease={[Function]}
                    onResponderTerminate={[Function]}
                    onResponderTerminationRequest={[Function]}
                    onStartShouldSetResponder={[Function]}
                    style={
                      Object {
                        "opacity": 1,
                        "paddingHorizontal": 16,
                        "paddingVertical": 5,
                      }
                    }
                    testID="Storybook.ListItem.LinearGradient.Linear Gradient"
                  >
                    <Text
                      selected={null}
                      style={
                        Object {
                          "color": "black",
                          "fontSize": 16,
                        }
                      }
                    >
                      Linear Gradient
                    </Text>
                  </View>
                </View>
                <View
                  onLayout={[Function]}
                  style={null}
                />
                <View
                  onLayout={[Function]}
                  style={null}
                >
                  <View
                    style={
                      Object {
                        "paddingVertical": 5,
                      }
                    }
                  >
                    <Text
                      selected={null}
                      style={
                        Object {
                          "color": "black",
                          "fontSize": 20,
                        }
                      }
                    >
                      Font
                    </Text>
                  </View>
                </View>
                <View
                  style={
                    Object {
                      "height": 0,
                    }
                  }
                />
              </View>
            </RCTScrollView>
          </RCTSafeAreaView>
        </View>
        <View
          style={
            Object {
              "backgroundColor": "white",
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
              "transform": Array [
                Object {
                  "translateX": 750,
                },
              ],
              "width": 487.49999999999994,
            }
          }
        >
          <RCTSafeAreaView
            emulateUnlessSupported={true}
            style={
              Object {
                "flex": 1,
              }
            }
          >
            <View
              style={
                Object {
                  "alignItems": "center",
                  "flexBasis": 0,
                  "flexGrow": 1,
                  "flexShrink": 1,
                  "justifyContent": "center",
                }
              }
            >
              <Text
                style={
                  Object {
                    "color": "black",
                    "fontSize": 18,
                  }
                }
              >
                No addons loaded.
              </Text>
            </View>
          </RCTSafeAreaView>
        </View>
      </View>
    </View>
    <View>
      <RCTSafeAreaView
        emulateUnlessSupported={true}
      >
        <View
          config={
            Object {
              "directionalOffsetThreshold": 80,
              "velocityThreshold": 0.2,
            }
          }
          onMoveShouldSetResponder={[Function]}
          onMoveShouldSetResponderCapture={[Function]}
          onResponderEnd={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderReject={[Function]}
          onResponderRelease={[Function]}
          onResponderStart={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          onStartShouldSetResponderCapture={[Function]}
          onSwipeLeft={[Function]}
          onSwipeRight={[Function]}
        >
          <View
            style={
              Object {
                "backgroundColor": "white",
                "borderBottomWidth": 1,
                "borderColor": "#e6e6e6",
                "borderTopWidth": 1,
                "flexDirection": "row",
                "paddingHorizontal": 8,
              }
            }
          >
            <View
              accessible={true}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "opacity": 1,
                }
              }
            >
              <Text
                active={false}
                style={
                  Object {
                    "color": "#999999",
                    "fontSize": 11,
                    "paddingHorizontal": 8,
                    "paddingVertical": 10,
                  }
                }
              >
                NAVIGATOR
              </Text>
              <View
                active={false}
                style={
                  Object {
                    "backgroundColor": "transparent",
                    "height": 3,
                  }
                }
              />
            </View>
            <View
              accessible={true}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "opacity": 1,
                }
              }
            >
              <Text
                active={true}
                style={
                  Object {
                    "color": "#444444",
                    "fontSize": 11,
                    "paddingHorizontal": 8,
                    "paddingVertical": 10,
                  }
                }
              >
                PREVIEW
              </Text>
              <View
                active={true}
                style={
                  Object {
                    "backgroundColor": "#e6e6e6",
                    "height": 3,
                  }
                }
              />
            </View>
            <View
              accessible={true}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "opacity": 1,
                }
              }
            >
              <Text
                active={false}
                style={
                  Object {
                    "color": "#999999",
                    "fontSize": 11,
                    "paddingHorizontal": 8,
                    "paddingVertical": 10,
                  }
                }
              >
                ADDONS
              </Text>
              <View
                active={false}
                style={
                  Object {
                    "backgroundColor": "transparent",
                    "height": 3,
                  }
                }
              />
            </View>
          </View>
        </View>
        <View>
          <View
            accessibilityLabel="Storybook.OnDeviceUI.toggleUI"
            accessible={true}
            focusable={true}
            hitSlop={
              Object {
                "bottom": 5,
                "left": 5,
                "right": 5,
                "top": 5,
              }
            }
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "backgroundColor": "transparent",
                "bottom": 12,
                "opacity": 1,
                "position": "absolute",
                "right": 8,
                "zIndex": 100,
              }
            }
            testID="Storybook.OnDeviceUI.toggleUI"
          >
            <Text
              style={
                Object {
                  "color": "#999999",
                  "fontSize": 14,
                }
              }
            >
              □
            </Text>
          </View>
        </View>
      </RCTSafeAreaView>
    </View>
  </View>
</RCTSafeAreaView>
`;
